// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Turf__getWalletAddressesResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: Address;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }
}

export class Turf__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Turf extends ethereum.SmartContract {
  static bind(address: Address): Turf {
    return new Turf("Turf", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseMysteryZoneTokenURI(): string {
    let result = super.call(
      "baseMysteryZoneTokenURI",
      "baseMysteryZoneTokenURI():(string)",
      []
    );

    return result[0].toString();
  }

  try_baseMysteryZoneTokenURI(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "baseMysteryZoneTokenURI",
      "baseMysteryZoneTokenURI():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  baseTokenURI(): string {
    let result = super.call("baseTokenURI", "baseTokenURI():(string)", []);

    return result[0].toString();
  }

  try_baseTokenURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseTokenURI", "baseTokenURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  baseTokenURILocked(): boolean {
    let result = super.call(
      "baseTokenURILocked",
      "baseTokenURILocked():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_baseTokenURILocked(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "baseTokenURILocked",
      "baseTokenURILocked():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  currentMode(): i32 {
    let result = super.call("currentMode", "currentMode():(uint8)", []);

    return result[0].toI32();
  }

  try_currentMode(): ethereum.CallResult<i32> {
    let result = super.tryCall("currentMode", "currentMode():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  founderPassClaimed(a: Address): boolean {
    let result = super.call(
      "founderPassClaimed",
      "founderPassClaimed(address):(bool)",
      [ethereum.Value.fromAddress(a)]
    );

    return result[0].toBoolean();
  }

  try_founderPassClaimed(a: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "founderPassClaimed",
      "founderPassClaimed(address):(bool)",
      [ethereum.Value.fromAddress(a)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWalletAddresses(): Turf__getWalletAddressesResult {
    let result = super.call(
      "getWalletAddresses",
      "getWalletAddresses():(address,address,address,address,address)",
      []
    );

    return new Turf__getWalletAddressesResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress()
    );
  }

  try_getWalletAddresses(): ethereum.CallResult<
    Turf__getWalletAddressesResult
  > {
    let result = super.tryCall(
      "getWalletAddresses",
      "getWalletAddresses():(address,address,address,address,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Turf__getWalletAddressesResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress()
      )
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxSupply(): BigInt {
    let result = super.call("maxSupply", "maxSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxSupply", "maxSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mysteryZoneBaseURILocked(): boolean {
    let result = super.call(
      "mysteryZoneBaseURILocked",
      "mysteryZoneBaseURILocked():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_mysteryZoneBaseURILocked(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "mysteryZoneBaseURILocked",
      "mysteryZoneBaseURILocked():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mysteryZones(param0: BigInt): boolean {
    let result = super.call("mysteryZones", "mysteryZones(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_mysteryZones(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("mysteryZones", "mysteryZones(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextOwnerToExplicitlySet(): BigInt {
    let result = super.call(
      "nextOwnerToExplicitlySet",
      "nextOwnerToExplicitlySet():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextOwnerToExplicitlySet(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextOwnerToExplicitlySet",
      "nextOwnerToExplicitlySet():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  openSeaProxyRegistryAddress(): Address {
    let result = super.call(
      "openSeaProxyRegistryAddress",
      "openSeaProxyRegistryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_openSeaProxyRegistryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "openSeaProxyRegistryAddress",
      "openSeaProxyRegistryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  price(): BigInt {
    let result = super.call("price", "price():(uint256)", []);

    return result[0].toBigInt();
  }

  try_price(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("price", "price():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  royaltyInfo(tokenId: BigInt, salePrice: BigInt): Turf__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salePrice)
      ]
    );

    return new Turf__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    tokenId: BigInt,
    salePrice: BigInt
  ): ethereum.CallResult<Turf__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salePrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Turf__royaltyInfoResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  verifyPresale(_merkleProof: Array<Bytes>, sender: Address): boolean {
    let result = super.call(
      "verifyPresale",
      "verifyPresale(bytes32[],address):(bool)",
      [
        ethereum.Value.fromFixedBytesArray(_merkleProof),
        ethereum.Value.fromAddress(sender)
      ]
    );

    return result[0].toBoolean();
  }

  try_verifyPresale(
    _merkleProof: Array<Bytes>,
    sender: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyPresale",
      "verifyPresale(bytes32[],address):(bool)",
      [
        ethereum.Value.fromFixedBytesArray(_merkleProof),
        ethereum.Value.fromAddress(sender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get baseTokenURI_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get maxSupply_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get maxFriendSupply_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get openSeaProxyRegistryAddress_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class EndSaleCall extends ethereum.Call {
  get inputs(): EndSaleCall__Inputs {
    return new EndSaleCall__Inputs(this);
  }

  get outputs(): EndSaleCall__Outputs {
    return new EndSaleCall__Outputs(this);
  }
}

export class EndSaleCall__Inputs {
  _call: EndSaleCall;

  constructor(call: EndSaleCall) {
    this._call = call;
  }
}

export class EndSaleCall__Outputs {
  _call: EndSaleCall;

  constructor(call: EndSaleCall) {
    this._call = call;
  }
}

export class FoundersBuildCall extends ethereum.Call {
  get inputs(): FoundersBuildCall__Inputs {
    return new FoundersBuildCall__Inputs(this);
  }

  get outputs(): FoundersBuildCall__Outputs {
    return new FoundersBuildCall__Outputs(this);
  }
}

export class FoundersBuildCall__Inputs {
  _call: FoundersBuildCall;

  constructor(call: FoundersBuildCall) {
    this._call = call;
  }

  get foundersMerkleProof(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get buildCount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FoundersBuildCall__Outputs {
  _call: FoundersBuildCall;

  constructor(call: FoundersBuildCall) {
    this._call = call;
  }
}

export class FriendBuildCall extends ethereum.Call {
  get inputs(): FriendBuildCall__Inputs {
    return new FriendBuildCall__Inputs(this);
  }

  get outputs(): FriendBuildCall__Outputs {
    return new FriendBuildCall__Outputs(this);
  }
}

export class FriendBuildCall__Inputs {
  _call: FriendBuildCall;

  constructor(call: FriendBuildCall) {
    this._call = call;
  }

  get recipients(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get countPerPerson(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FriendBuildCall__Outputs {
  _call: FriendBuildCall;

  constructor(call: FriendBuildCall) {
    this._call = call;
  }
}

export class GeneralBuildCall extends ethereum.Call {
  get inputs(): GeneralBuildCall__Inputs {
    return new GeneralBuildCall__Inputs(this);
  }

  get outputs(): GeneralBuildCall__Outputs {
    return new GeneralBuildCall__Outputs(this);
  }
}

export class GeneralBuildCall__Inputs {
  _call: GeneralBuildCall;

  constructor(call: GeneralBuildCall) {
    this._call = call;
  }

  get buildCount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GeneralBuildCall__Outputs {
  _call: GeneralBuildCall;

  constructor(call: GeneralBuildCall) {
    this._call = call;
  }
}

export class GeneralBuildWithPassCall extends ethereum.Call {
  get inputs(): GeneralBuildWithPassCall__Inputs {
    return new GeneralBuildWithPassCall__Inputs(this);
  }

  get outputs(): GeneralBuildWithPassCall__Outputs {
    return new GeneralBuildWithPassCall__Outputs(this);
  }
}

export class GeneralBuildWithPassCall__Inputs {
  _call: GeneralBuildWithPassCall;

  constructor(call: GeneralBuildWithPassCall) {
    this._call = call;
  }

  get _merkleProof(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get buildCount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class GeneralBuildWithPassCall__Outputs {
  _call: GeneralBuildWithPassCall;

  constructor(call: GeneralBuildWithPassCall) {
    this._call = call;
  }
}

export class HqBuildCall extends ethereum.Call {
  get inputs(): HqBuildCall__Inputs {
    return new HqBuildCall__Inputs(this);
  }

  get outputs(): HqBuildCall__Outputs {
    return new HqBuildCall__Outputs(this);
  }
}

export class HqBuildCall__Inputs {
  _call: HqBuildCall;

  constructor(call: HqBuildCall) {
    this._call = call;
  }
}

export class HqBuildCall__Outputs {
  _call: HqBuildCall;

  constructor(call: HqBuildCall) {
    this._call = call;
  }
}

export class LockBaseTokenURICall extends ethereum.Call {
  get inputs(): LockBaseTokenURICall__Inputs {
    return new LockBaseTokenURICall__Inputs(this);
  }

  get outputs(): LockBaseTokenURICall__Outputs {
    return new LockBaseTokenURICall__Outputs(this);
  }
}

export class LockBaseTokenURICall__Inputs {
  _call: LockBaseTokenURICall;

  constructor(call: LockBaseTokenURICall) {
    this._call = call;
  }
}

export class LockBaseTokenURICall__Outputs {
  _call: LockBaseTokenURICall;

  constructor(call: LockBaseTokenURICall) {
    this._call = call;
  }
}

export class LockMysteryZoneBaseTokenURICall extends ethereum.Call {
  get inputs(): LockMysteryZoneBaseTokenURICall__Inputs {
    return new LockMysteryZoneBaseTokenURICall__Inputs(this);
  }

  get outputs(): LockMysteryZoneBaseTokenURICall__Outputs {
    return new LockMysteryZoneBaseTokenURICall__Outputs(this);
  }
}

export class LockMysteryZoneBaseTokenURICall__Inputs {
  _call: LockMysteryZoneBaseTokenURICall;

  constructor(call: LockMysteryZoneBaseTokenURICall) {
    this._call = call;
  }
}

export class LockMysteryZoneBaseTokenURICall__Outputs {
  _call: LockMysteryZoneBaseTokenURICall;

  constructor(call: LockMysteryZoneBaseTokenURICall) {
    this._call = call;
  }
}

export class PowerPlantBuildCall extends ethereum.Call {
  get inputs(): PowerPlantBuildCall__Inputs {
    return new PowerPlantBuildCall__Inputs(this);
  }

  get outputs(): PowerPlantBuildCall__Outputs {
    return new PowerPlantBuildCall__Outputs(this);
  }
}

export class PowerPlantBuildCall__Inputs {
  _call: PowerPlantBuildCall;

  constructor(call: PowerPlantBuildCall) {
    this._call = call;
  }

  get a(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get count(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PowerPlantBuildCall__Outputs {
  _call: PowerPlantBuildCall;

  constructor(call: PowerPlantBuildCall) {
    this._call = call;
  }
}

export class PreSaleBuildCall extends ethereum.Call {
  get inputs(): PreSaleBuildCall__Inputs {
    return new PreSaleBuildCall__Inputs(this);
  }

  get outputs(): PreSaleBuildCall__Outputs {
    return new PreSaleBuildCall__Outputs(this);
  }
}

export class PreSaleBuildCall__Inputs {
  _call: PreSaleBuildCall;

  constructor(call: PreSaleBuildCall) {
    this._call = call;
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get foundersMerkleProof(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get buildCount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PreSaleBuildCall__Outputs {
  _call: PreSaleBuildCall;

  constructor(call: PreSaleBuildCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get baseTokenURI_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetFounderPassMerkleRootCall extends ethereum.Call {
  get inputs(): SetFounderPassMerkleRootCall__Inputs {
    return new SetFounderPassMerkleRootCall__Inputs(this);
  }

  get outputs(): SetFounderPassMerkleRootCall__Outputs {
    return new SetFounderPassMerkleRootCall__Outputs(this);
  }
}

export class SetFounderPassMerkleRootCall__Inputs {
  _call: SetFounderPassMerkleRootCall;

  constructor(call: SetFounderPassMerkleRootCall) {
    this._call = call;
  }

  get merkRoot(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetFounderPassMerkleRootCall__Outputs {
  _call: SetFounderPassMerkleRootCall;

  constructor(call: SetFounderPassMerkleRootCall) {
    this._call = call;
  }
}

export class SetIsOpenSeaProxyActiveCall extends ethereum.Call {
  get inputs(): SetIsOpenSeaProxyActiveCall__Inputs {
    return new SetIsOpenSeaProxyActiveCall__Inputs(this);
  }

  get outputs(): SetIsOpenSeaProxyActiveCall__Outputs {
    return new SetIsOpenSeaProxyActiveCall__Outputs(this);
  }
}

export class SetIsOpenSeaProxyActiveCall__Inputs {
  _call: SetIsOpenSeaProxyActiveCall;

  constructor(call: SetIsOpenSeaProxyActiveCall) {
    this._call = call;
  }

  get isOpenSeaProxyActive_(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetIsOpenSeaProxyActiveCall__Outputs {
  _call: SetIsOpenSeaProxyActiveCall;

  constructor(call: SetIsOpenSeaProxyActiveCall) {
    this._call = call;
  }
}

export class SetMysteryZoneUriCall extends ethereum.Call {
  get inputs(): SetMysteryZoneUriCall__Inputs {
    return new SetMysteryZoneUriCall__Inputs(this);
  }

  get outputs(): SetMysteryZoneUriCall__Outputs {
    return new SetMysteryZoneUriCall__Outputs(this);
  }
}

export class SetMysteryZoneUriCall__Inputs {
  _call: SetMysteryZoneUriCall;

  constructor(call: SetMysteryZoneUriCall) {
    this._call = call;
  }

  get uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetMysteryZoneUriCall__Outputs {
  _call: SetMysteryZoneUriCall;

  constructor(call: SetMysteryZoneUriCall) {
    this._call = call;
  }
}

export class SetMysteryZonesCall extends ethereum.Call {
  get inputs(): SetMysteryZonesCall__Inputs {
    return new SetMysteryZonesCall__Inputs(this);
  }

  get outputs(): SetMysteryZonesCall__Outputs {
    return new SetMysteryZonesCall__Outputs(this);
  }
}

export class SetMysteryZonesCall__Inputs {
  _call: SetMysteryZonesCall;

  constructor(call: SetMysteryZonesCall) {
    this._call = call;
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetMysteryZonesCall__Outputs {
  _call: SetMysteryZonesCall;

  constructor(call: SetMysteryZonesCall) {
    this._call = call;
  }
}

export class SetPresaleMerkleRootCall extends ethereum.Call {
  get inputs(): SetPresaleMerkleRootCall__Inputs {
    return new SetPresaleMerkleRootCall__Inputs(this);
  }

  get outputs(): SetPresaleMerkleRootCall__Outputs {
    return new SetPresaleMerkleRootCall__Outputs(this);
  }
}

export class SetPresaleMerkleRootCall__Inputs {
  _call: SetPresaleMerkleRootCall;

  constructor(call: SetPresaleMerkleRootCall) {
    this._call = call;
  }

  get merkRoot(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetPresaleMerkleRootCall__Outputs {
  _call: SetPresaleMerkleRootCall;

  constructor(call: SetPresaleMerkleRootCall) {
    this._call = call;
  }
}

export class SetStaffPassMerkleRootCall extends ethereum.Call {
  get inputs(): SetStaffPassMerkleRootCall__Inputs {
    return new SetStaffPassMerkleRootCall__Inputs(this);
  }

  get outputs(): SetStaffPassMerkleRootCall__Outputs {
    return new SetStaffPassMerkleRootCall__Outputs(this);
  }
}

export class SetStaffPassMerkleRootCall__Inputs {
  _call: SetStaffPassMerkleRootCall;

  constructor(call: SetStaffPassMerkleRootCall) {
    this._call = call;
  }

  get merkRoot(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetStaffPassMerkleRootCall__Outputs {
  _call: SetStaffPassMerkleRootCall;

  constructor(call: SetStaffPassMerkleRootCall) {
    this._call = call;
  }
}

export class SetWalletAddressesCall extends ethereum.Call {
  get inputs(): SetWalletAddressesCall__Inputs {
    return new SetWalletAddressesCall__Inputs(this);
  }

  get outputs(): SetWalletAddressesCall__Outputs {
    return new SetWalletAddressesCall__Outputs(this);
  }
}

export class SetWalletAddressesCall__Inputs {
  _call: SetWalletAddressesCall;

  constructor(call: SetWalletAddressesCall) {
    this._call = call;
  }

  get m(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get k(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get d(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get og(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get t(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class SetWalletAddressesCall__Outputs {
  _call: SetWalletAddressesCall;

  constructor(call: SetWalletAddressesCall) {
    this._call = call;
  }
}

export class StartFoundersSaleCall extends ethereum.Call {
  get inputs(): StartFoundersSaleCall__Inputs {
    return new StartFoundersSaleCall__Inputs(this);
  }

  get outputs(): StartFoundersSaleCall__Outputs {
    return new StartFoundersSaleCall__Outputs(this);
  }
}

export class StartFoundersSaleCall__Inputs {
  _call: StartFoundersSaleCall;

  constructor(call: StartFoundersSaleCall) {
    this._call = call;
  }
}

export class StartFoundersSaleCall__Outputs {
  _call: StartFoundersSaleCall;

  constructor(call: StartFoundersSaleCall) {
    this._call = call;
  }
}

export class StartGeneralSaleCall extends ethereum.Call {
  get inputs(): StartGeneralSaleCall__Inputs {
    return new StartGeneralSaleCall__Inputs(this);
  }

  get outputs(): StartGeneralSaleCall__Outputs {
    return new StartGeneralSaleCall__Outputs(this);
  }
}

export class StartGeneralSaleCall__Inputs {
  _call: StartGeneralSaleCall;

  constructor(call: StartGeneralSaleCall) {
    this._call = call;
  }
}

export class StartGeneralSaleCall__Outputs {
  _call: StartGeneralSaleCall;

  constructor(call: StartGeneralSaleCall) {
    this._call = call;
  }
}

export class StartPreSaleCall extends ethereum.Call {
  get inputs(): StartPreSaleCall__Inputs {
    return new StartPreSaleCall__Inputs(this);
  }

  get outputs(): StartPreSaleCall__Outputs {
    return new StartPreSaleCall__Outputs(this);
  }
}

export class StartPreSaleCall__Inputs {
  _call: StartPreSaleCall;

  constructor(call: StartPreSaleCall) {
    this._call = call;
  }
}

export class StartPreSaleCall__Outputs {
  _call: StartPreSaleCall;

  constructor(call: StartPreSaleCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawTokensCall extends ethereum.Call {
  get inputs(): WithdrawTokensCall__Inputs {
    return new WithdrawTokensCall__Inputs(this);
  }

  get outputs(): WithdrawTokensCall__Outputs {
    return new WithdrawTokensCall__Outputs(this);
  }
}

export class WithdrawTokensCall__Inputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawTokensCall__Outputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }
}
